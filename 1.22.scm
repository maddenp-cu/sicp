(define (prime? n)
  (define (smallest-divisor n)
    (define (find-divisor n test-divisor)
      (define (divides? a b) (= (remainder b a) 0))
      (define (square n) (* n n))
      (cond ((> (square test-divisor) n) n)
            ((divides? test-divisor n) test-divisor)
            (else (find-divisor n (+ test-divisor 1)))))
    (find-divisor n 2))
  (= n (smallest-divisor n)))


(define (usec)
  (let ((t (gettimeofday)))
    (+ (* 1000000 (car t)) (cdr t))))

(define (find-primes n limit found)
  (if (< found limit)
      (if (prime? n)
          (begin
            (let ((t0 (usec)))
              (prime? n)
              (format #t "~d | ~d Âµs vs ~g~%" n (- (usec) t0) (/ (sqrt n) 100)))
            (find-primes (+ n 2) limit (+ found 1)))
          (find-primes (+ n 2) limit found))))

(find-primes 1001 3 0)
(newline)
(find-primes 10001 3 0)
(newline)
(find-primes 100001 3 0)
(newline)
(find-primes 1000001 3 0)
(newline)
(find-primes 10000001 3 0)
(newline)
(find-primes 100000001 3 0)
