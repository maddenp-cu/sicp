(define (smallest-divisor n f)
  (define (find-divisor n test-divisor)
    (define (divides? a b) (= (remainder b a) 0))
    (define (square n) (* n n))
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (f test-divisor)))))
  (find-divisor n 2))

(define (time f)
  (define (usec)
    (let ((t (gettimeofday)))
      (+ (* 1000000 (car t)) (cdr t))))
  (let ((t0 (usec)))
    (f)
    (- (usec) t0)))

(define (inc n) (+ n 1))
(define (next n) (if (= n 2) 3 (+ n 2)))

(define (old n) (format #t "~d ~d~%" n (time (lambda () (smallest-divisor n inc)))))
(define (new n) (format #t "~d ~d~%" n (time (lambda () (smallest-divisor n next)))))

(old 414507281407)
(new 414507281407)
(newline)
(old 53982894593057)
(new 53982894593057)
(newline)
(old 119543903707171)
(new 119543903707171)
(newline)
(old 180252380737439)
(new 180252380737439)
(newline)
(old 222334565193649)
(new 222334565193649)
